#!/bin/bash

# This script assumes the following packages are installed.
# manjaro-tools-base (repo)
# qemu (repo)
# qemu-user-static (aur)
# binfmt-support-git (aur)
# binfmt-qemu-static (aur)

usage="Variable list order: 
1=Device, 
2=Edition, 
3=Version,
4=Rootfs,
5=size in MB

Example: rpi2 minimal 18.05 rootfs_armv7h 1500
Example2: oc2 server 18.05 rootfs_armv7h 2000"

ROOTFS="/var/lib/manjaro-arm-tools/img"
_ROOTFS="$4"
_SIZE="$5"

#Display messages
   msg() {
     ALL_OFF="\e[1;0m"
     BOLD="\e[1;1m"
     GREEN="${BOLD}\e[1;32m"
       local mesg=$1; shift
       printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
   }

case $1 in
rpi2)
msg "Creating rootfs for Raspberry Pi..."
# get pacman.conf
wget http://downloads.manjaro-arm.org/configuration/pacman.conf.default -O $ROOTFS/pacman.conf.default

# backup host mirrorlist
sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-orig

# Create arm mirrlorlist
echo "Server = http://mirror.strits.dk/manjaro-arm/stable/\$arch/\$repo/" > mirrorlist
sudo mv mirrorlist /etc/pacman.d/mirrorlist

# cd to root_fs
cd $ROOTFS

# create folder for the rootfs
mkdir -p rootfs_armv7h

    case $2 in
    minimal)
    # basescrap the rootfs filesystem
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_armv7h base base-devel manjaro-system archlinuxarm-keyring lsb-release parted openssh haveged polkit linux-raspberrypi raspberrypi-bootloader raspberrypi-firmware
    ;;
    lxqt)
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_armv7h base base-devel manjaro-system archlinuxarm-keyring lsb-release parted openssh haveged networkmanager-qt linux-raspberrypi raspberrypi-bootloader raspberrypi-firmware xf86-video-fbdev lxqt sddm 
    sudo systemd-nspawn -D rootfs_armv7h systemctl enable sddm.service
    ;;
    mate)
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_armv7h base base-devel manjaro-system manjaro-arm-keyring archlinuxarm-keyring manjaro-release lsb-release pacman-mirrorlist yaourt openssh haveged networkmanager linux-raspberrypi raspberrypi-bootloader raspberrypi-firmware mate mate-tweak lightdm
    sudo systemd-nspawn -D rootfs_armv7h systemctl enable lightdm.service
    ;;
    *)
    echo -e "$usage"
    ;;
    esac
    
# Enable cross architecture Chrooting
sudo cp /usr/bin/qemu-arm-static $ROOTFS/rootfs_armv7h/usr/bin/
sudo update-binfmts --enable qemu-arm

msg "Enabling services..."

# Enable services
sudo systemd-nspawn -D rootfs_armv7h systemctl enable systemd-networkd.service sshd.service getty.target haveged.service dhcpcd.service

# restore original mirrorlist to host system
sudo mv /etc/pacman.d/mirrorlist-orig /etc/pacman.d/mirrorlist
sudo pacman -Syy

msg "Setting up users..."

#setup users
#sudo systemd-nspawn -D rootfs_armv7h pwconv
sudo systemd-nspawn -D rootfs_armv7h passwd root < $ROOTFS/pass-root
sudo systemd-nspawn -D rootfs_armv7h useradd -m -g users -G wheel,storage,network,power,users -s /bin/bash manjaro
sudo systemd-nspawn -D rootfs_armv7h passwd manjaro < $ROOTFS/pass-manjaro
sudo systemd-nspawn -D rootfs_armv7h chmod u+s /usr/bin/ping

msg "Setting up system settings..."
sudo cp $ROOTFS/10-installer $ROOTFS/rootfs_armv7h/etc/sudoers.d/
sudo cp $ROOTFS/resize-sd $ROOTFS/rootfs_armv7h/usr/bin/
sudo cp $ROOTFS/20-wired.network $ROOTFS/rootfs_armv7h/etc/systemd/network/

msg "Setting up keyrings..."

#setup keys
#msg "Chrooting into rootfs. Please run pacman-key --init && pacman-key --populate archlinux archlinuxarm manjaro-arm && exit in here"
#sudo systemd-nspawn -D rootfs_armv7h
sudo systemd-nspawn -D rootfs_armv7h pacman-key --init
sudo systemd-nspawn -D rootfs_armv7h pacman-key --populate archlinux archlinuxarm manjaro-arm

msg "Raspberry Pi $2 rootfs complete"

# Create tarball
#msg "Creating tarball of the Raspberry Pi rootfs..."
#cd $ROOTFS/rootfs_armv7h
#sudo tar -cpzf ../Manjaro-ARM-$2-$1-$3.tar.gz .
#cd ..
#md5sum Manjaro-ARM-$2-$1-$3.tar.gz > $ROOTFS/Manjaro-ARM-$2-$1-$3.tar.gz.md5

# Cleanup
#sudo rm -rf $ROOTFS/rootfs_armv7h $ROOTFS/pacman.conf.default
#msg "Tarball and checksum created!"
    ;;
oc1)
msg "Creating rootfs for Odroid-C1..."
# get pacman.conf
wget http://downloads.manjaro-arm.org/configuration/pacman.conf.default -O $ROOTFS/pacman.conf.default

# backup host mirrorlist
sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-orig

# Create arm mirrlorlist
echo "Server = http://mirror.strits.dk/manjaro-arm/stable/\$arch/\$repo/" > mirrorlist
sudo mv mirrorlist /etc/pacman.d/mirrorlist

# cd to root_fs
cd $ROOTFS

# create folder for the rootfs
mkdir -p rootfs_armv7h

    case $2 in
    minimal)
    # basescrap the rootfs filesystem
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_armv7h base base-devel manjaro-system manjaro-arm-keyring archlinuxarm-keyring manjaro-release lsb-release pacman-mirrorlist yaourt openssh haveged networkmanager linux-odroid-c1 uboot-odroid-c1
    ;;
    lxqt)
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_armv7h base base-devel manjaro-system manjaro-arm-keyring archlinuxarm-keyring manjaro-release lsb-release pacman-mirrorlist yaourt openssh haveged networkmanager linux-odroid-c1 uboot-odroid-c1 lxqt lightdm
    sudo systemd-nspawn -D rootfs_armv7h systemctl enable lightdm.service
    ;;
    mate)
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_armv7h base base-devel manjaro-system manjaro-arm-keyring archlinuxarm-keyring manjaro-release lsb-release pacman-mirrorlist yaourt openssh haveged networkmanager linux-odroid-c1 uboot-odroid-c1 mate mate-tweak lightdm
    sudo systemd-nspawn -D rootfs_armv7h systemctl enable lightdm.service
    ;;
    *)
    echo -e "$usage"
    ;;
    esac
    
# Enable cross architecture Chrooting
sudo cp /usr/bin/qemu-arm-static $ROOTFS/rootfs_armv7h/usr/bin/
sudo update-binfmts --enable qemu-arm

msg "Enabling services..."

# Enable services
sudo systemd-nspawn -D rootfs_armv7h systemctl enable systemd-networkd.service sshd.service getty.target NetworkManager.service haveged.service

# restore original mirrorlist to host system
sudo mv /etc/pacman.d/mirrorlist-orig /etc/pacman.d/mirrorlist
sudo pacman -Syy

msg "Setting up users..."

#setup users
#sudo systemd-nspawn -D rootfs_armv7h pwconv
sudo systemd-nspawn -D rootfs_armv7h passwd root < $ROOTFS/pass-root
sudo systemd-nspawn -D rootfs_armv7h useradd -m -g users -G wheel,storage,power -s /bin/bash manjaro
sudo systemd-nspawn -D rootfs_armv7h passwd manjaro < $ROOTFS/pass-manjaro
sudo cp $ROOTFS/10-installer $ROOTFS/rootfs_armv7h/etc/sudoers.d/

msg "Setting up keyrings..."

#setup keys
sudo systemd-nspawn -D rootfs_armv7h pacman-key --init
sudo systemd-nspawn -D rootfs_armv7h pacman-key --populate archlinux archlinuxarm manjaro-arm

# Create tarball
msg "Creating tarball of the Odroid-C1 rootfs..."
cd $ROOTFS/rootfs_armv7h
sudo tar -cpzf ../Manjaro-ARM-$2-$1-$3.tar.gz .
cd ..
md5sum Manjaro-ARM-$2-$1-$3.tar.gz > $ROOTFS/Manjaro-ARM-$2-$1-$3.tar.gz.md5

# Cleanup
#sudo rm -rf $ROOTFS/rootfs_armv7h $ROOTFS/pacman.conf.default
msg "Tarball and checksum created!"
    ;;
oc2)
msg "Creating rootfs for Odroid-C2..."
# get pacman.conf
wget http://downloads.manjaro-arm.org/configuration/pacman.conf.default -O $ROOTFS/pacman.conf.default

# Put in architecture to mirrorlist
sed -i s/armv7h/aarch64/ $ROOTFS/pacman.conf.default

# backup host mirrorlist
sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist-orig

# Create arm mirrlorlist
echo "Server = http://mirror.strits.dk/manjaro-arm/stable/\$arch/\$repo/" > mirrorlist
sudo mv mirrorlist /etc/pacman.d/mirrorlist

# cd to root_fs
cd $ROOTFS

# create folder for the rootfs
mkdir -p rootfs_aarch64

    case $2 in
    minimal)
    # basescrap the rootfs filesystem
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_aarch64 base base-devel manjaro-system manjaro-arm-keyring archlinuxarm-keyring manjaro-release lsb-release pacman-mirrorlist yaourt openssh haveged networkmanager linux-odroid-c2 uboot-odroid-c2
    ;;
    lxqt)
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_aarch64 base base-devel manjaro-system manjaro-arm-keyring archlinuxarm-keyring manjaro-release lsb-release pacman-mirrorlist yaourt openssh haveged networkmanager linux-raspberrypi raspberrypi-bootloader raspberrypi-firmware lxqt lightdm
    sudo systemd-nspawn -D rootfs_armv7h systemctl enable lightdm.service
    ;;
    mate)
    basestrap -G -C $ROOTFS/pacman.conf.default $ROOTFS/rootfs_aarch64 base base-devel manjaro-system manjaro-arm-keyring archlinuxarm-keyring manjaro-release lsb-release pacman-mirrorlist yaourt openssh haveged networkmanager linux-raspberrypi raspberrypi-bootloader raspberrypi-firmware mate mate-tweak lightdm
    sudo systemd-nspawn -D rootfs_armv7h systemctl enable lightdm.service
    ;;
    *)
    echo -e "$usage"
    ;;
    esac
    
# Enable cross architecture Chrooting
sudo cp /usr/bin/qemu-aarch64-static $ROOTFS/rootfs_aarch64/usr/bin/
sudo update-binfmts --enable qemu-aarch64

msg "Enabling services..."

# Enable services
sudo systemd-nspawn -D rootfs_aarch64 systemctl enable systemd-networkd.service sshd.service getty.target NetworkManager.service haveged.service

# restore original mirrorlist to host system
sudo mv /etc/pacman.d/mirrorlist-orig /etc/pacman.d/mirrorlist
sudo pacman -Syy

msg "Setting up users..."

#setup users
#sudo systemd-nspawn -D rootfs_armv7h pwconv
sudo systemd-nspawn -D rootfs_aarch64 passwd root < $ROOTFS/pass-root
sudo systemd-nspawn -D rootfs_aarch64 useradd -m -g users -G wheel,storage,power -s /bin/bash manjaro
sudo systemd-nspawn -D rootfs_aarch64 passwd manjaro < $ROOTFS/pass-manjaro
sudo cp $ROOTFS/10-installer $ROOTFS/rootfs_aarch64/etc/sudoers.d/

msg "Setting up keyrings..."

#setup keys
sudo systemd-nspawn -D rootfs_aarch64 pacman-key --init
sudo systemd-nspawn -D rootfs_aarch64 pacman-key --populate archlinux archlinuxarm manjaro-arm

# Create tarball
msg "Creating tarball of the Odroid-C2 rootfs..."
cd $ROOTFS/rootfs_aarch64
sudo tar -cpzf ../Manjaro-ARM-$2-$1-$3.tar.gz .
cd ..
md5sum Manjaro-ARM-$2-$1-$3.tar.gz > $ROOTFS/Manjaro-ARM-$2-$1-$3.tar.gz.md5

# Cleanup
#sudo rm -rf $ROOTFS/rootfs_armv7h $ROOTFS/pacman.conf.default
msg "Tarball and checksum created!"
    ;;
*)
    echo -e "$usage"
    ;;
esac


msg "Creating image!"
#!/bin/bash

#GLOBALS
#_ROOTFS="$4"
#_DEVICE="$1"
#_EDITION="$2"
_SIZE="$5"
#_VERSION="$3"
#_DATE=$(date +"%g.%m-%d-%H%M")
_IMGNAME="Manjaro-ARM-$2-$1-$3"

# Test for device input
if [[ "$1" != "rpi2" && "$1" != "oc1" && "$1" != "oc2" && "$1" != "xu4" && "$1" != "bbb" && "$1" != "bbxm" ]]; then
        echo 'Invalid device '$1', please choose one of the following'
        echo 'rpi2  |  oc1  | oc2  |  xu4  '
	exit 1
else
   	_DEVICE="$1"
fi

if [ ! -d "$4" ]; then
   echo 'The '$4' directory does not exist'
   echo 'Please enter a valid directory'
   exit 2
else 
	_ROOTFS="$4"
fi

#Display messages
   msg() {
     ALL_OFF="\e[1;0m"
     BOLD="\e[1;1m"
     GREEN="${BOLD}\e[1;32m"
       local mesg=$1; shift
       printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
   }

msg "Please ensure that the rootfs is configured and all necessary boot packages are installed"

##Image set up
#making blank .img to be used
sudo dd if=/dev/zero of=$_IMGNAME.img bs=1M count=$_SIZE

#probing loop into the kernel
sudo modprobe loop

#set up loop device
LDEV=`sudo losetup -f`
DEV=`echo $LDEV | cut -d "/" -f 3`

#mount image to loop device
sudo losetup $LDEV $_IMGNAME.img



if [[ "$_DEVICE" = "rpi2" ]]; then
#partition with boot and root
	sudo parted -s $LDEV mklabel msdos
	sudo parted -s $LDEV mkpart primary fat32 0% 100M
	START=`cat /sys/block/$DEV/${DEV}p1/start`
	SIZE=`cat /sys/block/$DEV/${DEV}p1/size`
	END_SECTOR=$(expr $START + $SIZE)
	sudo parted -s $LDEV mkpart primary ext4 "${END_SECTOR}s" 100%
	sudo partprobe $LDEV
	sudo mkfs.vfat "${LDEV}p1"
	sudo mkfs.ext4 "${LDEV}p2"

#copy rootfs contents over to the FS
	mkdir root
	mkdir boot
	sudo mount ${LDEV}p1 boot
	sudo mount ${LDEV}p2 root
	sudo cp -ra $_ROOTFS/* root/
	sudo mv root/boot/* boot

#clean up
	sudo umount root
	sudo umount boot
	sudo losetup -d $LDEV
	sudo rm -r root boot
	sudo partprobe $LDEV

elif [[ "$_DEVICE" = "oc1" ]] || [[ "$_DEVICE" = "oc2" ]] || [[ "$_DEVICE" = "xu4" ]]; then
#Clear first 8mb
	sudo dd if=/dev/zero of=${LDEV} bs=1M count=8
	
#partition with a single root partition
	sudo parted -s $LDEV mklabel msdos
	sudo parted -s $LDEV mkpart primary ext4 0% 100%
	sudo partprobe $LDEV
if [[ "$_DEVICE" = "xu4" ]]; then
	sudo mkfs.ext4 "${LDEV}p1"
else
	sudo mkfs.ext4 -O ^metadata_csum,^64bit ${LDEV}p1
fi

#copy rootfs contents over to the FS
	mkdir root
	sudo mount ${LDEV}p1 root
	sudo cp -ra $_ROOTFS/* root/

#flash bootloader
	cd root/boot/
	sudo ./sd_fusing.sh $LDEV
	cd ../..

#clean up
	sudo umount root
	sudo losetup -d $LDEV
	sudo rm -r root
	sudo partprobe $LDEV

else
	echo "The $_DEVICE" has not been set up yet
fi

#zip img
zip -9 $_IMGNAME.zip $_IMGNAME.img 
